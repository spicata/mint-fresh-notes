/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  InsertCommandIdModel: () => InsertCommandIdModel,
  KeySequenceModal: () => KeySequenceModal,
  KeySequenceShortcutSettingTab: () => KeySequenceShortcutSettingTab,
  default: () => KeySequenceShortcutPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var import_obsidian2 = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  kssrc_file_path: "kssrc.md"
};
var KeySequenceShortcutSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Config File").addText((text) => text.setPlaceholder("").setValue(this.plugin.settings.kssrc_file_path).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.kssrc_file_path = value;
      yield this.plugin.saveSettings();
    })));
  }
};
var g_all_key_items = [];
var KeySequenceModal = class extends import_obsidian2.SuggestModal {
  getSuggestions(query) {
    const result = g_all_key_items.find((key_item) => {
      return key_item.key_sequence == query;
    });
    if (result != null) {
      this.close();
      this.delay(100).then((data) => {
        this.execute(result);
      });
    }
    return g_all_key_items.filter((key_item) => key_item.key_sequence.startsWith(query));
  }
  renderSuggestion(key_item, el) {
    el.createEl("div", { text: key_item.key_sequence + ": " + (key_item.description == "" ? key_item.command : key_item.description) });
  }
  onChooseSuggestion(key_item, evt) {
    this.execute(key_item);
  }
  execute(key_item) {
    console.log(`Execute ${key_item.key_sequence}: ${key_item.command}`);
    this.app.commands.executeCommandById(key_item.command);
  }
  delay(ms) {
    return __async(this, null, function* () {
      return new Promise((resolve) => setTimeout(resolve, ms));
    });
  }
};
var InsertCommandIdModel = class extends import_obsidian.FuzzySuggestModal {
  getItems() {
    return Object.values(this.app.commands.commands);
  }
  getItemText(item) {
    return item.name + " -> " + item.id;
  }
  onChooseItem(item, evt) {
    console.log(this.getItemText(item));
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view) {
      const editor = view.editor;
      const pos = editor.getCursor();
      editor.replaceRange(`${item.id}	${item.name}`, pos);
      pos.ch += item.id.length;
      editor.setCursor(pos);
    }
  }
};
var KeySequenceShortcutPlugin = class extends import_obsidian.Plugin {
  readKssInit(kss_config) {
    g_all_key_items = [];
    kss_config.split("\n").forEach((line, index) => {
      line = line.trim();
      if (line.length > 0 && line[0] != '"') {
        const split = line.split("	");
        if (split.length != 2 && split.length != 3) {
          console.log(`Skip line ${index} "${line}": the format should be "key-sequence<TAB>command-id<TAB>description", the last field "description" is optional.`);
          return;
        }
        const key_item = { key_sequence: split[0], command: split[1], description: split.length == 3 ? split[2] : "" };
        g_all_key_items.push(key_item);
      }
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.load_kssrc_file();
      this.addCommand({
        id: "open-key-sequence-palette",
        name: "Open Key Sequence Palette (Menu)",
        icon: "any-key",
        hotkeys: [{ modifiers: ["Ctrl"], key: "m" }],
        callback: () => {
          new KeySequenceModal(this.app).open();
        }
      });
      this.addCommand({
        id: "insert-command-id",
        name: "Insert Command Id and Name",
        hotkeys: [{ modifiers: ["Ctrl", "Shift"], key: "8" }],
        icon: "duplicate-glyph",
        callback: () => {
          new InsertCommandIdModel(this.app).open();
        }
      });
      this.addCommand({
        id: "reload-kssrc",
        name: "Reload Key Sequence Shortcut Config File",
        icon: "play-audio-glyph",
        callback: () => __async(this, null, function* () {
          yield this.load_kssrc_file();
        })
      });
      this.settingTab = new KeySequenceShortcutSettingTab(this.app, this);
      this.addSettingTab(this.settingTab);
      console.log("KeySequenceShortcutPlugin load successfully.");
    });
  }
  load_kssrc_file() {
    return __async(this, null, function* () {
      try {
        const lines = yield this.app.vault.adapter.read(this.settings.kssrc_file_path);
        this.readKssInit(lines);
      } catch (error) {
        console.log("Error loading kssrc file", this.settings.kssrc_file_path, "from the vault root", error);
      }
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
      this.load_kssrc_file();
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
